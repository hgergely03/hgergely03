import{_ as o}from"./preload-helper-650b88c2.js";import{w as s}from"./writeEffect-f67660a4.js";import"./index-3c51c478.js";import"./sleep-648bee9f.js";import"./index-06d6d442.js";import"./translations-8624279a.js";import"./GridItem-8d35dd39.js";import"./posts-e32a2494.js";import"./IconBase-31fea9dd.js";const d=(e,t)=>{new MutationObserver(i=>{i.forEach(n=>{const c=n.type==="attributes",a=n.target.classList.contains("typing");c&&a&&t()})}).observe(e,{attributes:!0,childList:!0,subtree:!0})},m=e=>e.forEach(t=>t.currentNode.textContent=""),_=async(e,t)=>{if(t.cascade)m(e);else{const{getLongestTextElement:r}=await o(()=>import("./getLongestTextElement-873fd343.js"),[]),i=r(e);d(i,()=>t.dispatch("done"))}for(const r of e)t.cascade?(await s(r,t),r.currentNode.classList.replace("typing","finished-typing")):s(r,t).then(()=>{r.currentNode.classList.replace("typing","finished-typing")});t.cascade&&t.dispatch("done")};export{_ as mode};
